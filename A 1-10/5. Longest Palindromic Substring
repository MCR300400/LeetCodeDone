class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        n = len(s)  # Calcola la lunghezza della stringa
        longest_palindrome = ''  # Inizializza la sottostringa palindromica più lunga
        
        # Loop attraverso ogni carattere della stringa
        for i in range(n):
            # Controlla per i palindromi di lunghezza dispari
            l, r = i, i  # Inizia dal carattere corrente
            while l >= 0 and r < n and s[l] == s[r]:  # Espandi il palindromo verso sinistra e destra finché possibile
                l -= 1
                r += 1
            if len(longest_palindrome) < r - l - 1:  # Aggiorna la sottostringa palindromica più lunga, se necessario
                longest_palindrome = s[l+1:r]
            
            # Controlla per i palindromi di lunghezza pari
            l, r = i, i+1  # Inizia dal carattere corrente e quello successivo
            while l >= 0 and r < n and s[l] == s[r]:  # Espandi il palindromo verso sinistra e destra finché possibile
                l -= 1
                r += 1
            if len(longest_palindrome) < r - l - 1:  # Aggiorna la sottostringa palindromica più lunga, se necessario
                longest_palindrome = s[l+1:r]
        
        return longest_palindrome  # Restituisce la sottostringa palindromica più lunga trovata
